import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from torch import nn
from streamlit_extras.let_it_rain import rain




def eye():
    rain(
        emoji="üëÅ",
        font_size=100,
        falling_speed=6,
        animation_length="infinite",
    )

eye()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
class ToxicBert(nn.Module):
    def __init__(self):
        super().__init__()
        self.bert = AutoModelForSequenceClassification.from_pretrained('cointegrated/rubert-tiny-toxicity')
        for param in self.bert.parameters():
            param.requires_grad = False
        self.bert.classifier = nn.Linear(312, 1)
        for param in self.bert.classifier.parameters():
            param.requires_grad = True

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        return outputs.logits

st.image("maxon.gif", width=1000)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤
device = 'cuda' if torch.cuda.is_available() else 'cpu'
model = ToxicBert()
model.load_state_dict(torch.load('toxic_bert.pt', map_location=torch.device(device)))
model.to(device)
model.eval()

tokenizer = AutoTokenizer.from_pretrained("cointegrated/rubert-tiny-toxicity")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏
def predict_toxicity(text):
    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=512).to(device)
    with torch.no_grad():
        outputs = model(inputs['input_ids'], inputs['attention_mask'])
        preds = torch.sigmoid(outputs).cpu().numpy()
    return "—á–µ–ª —Ç—ã —Ç–æ–∫—Å–∏–∫" if preds[0][0] > 0.5 else "—á–µ–ª —Ç—ã –Ω–µ–∂–µ–Ω–∫–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit

# HTML –∏ CSS –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
html_code = """
<style>
@keyframes rainbow {
    0% { color: red; }
    14% { color: orange; }
    28% { color: yellow; }
    42% { color: green; }
    57% { color: blue; }
    71% { color: indigo; }
    85% { color: violet; }
    100% { color: red; }
}

.rainbow-text {
    font-size: 3em;
    font-weight: bold;
    text-align: center;
    animation: rainbow 5s infinite;
}
</style>

<div class="rainbow-text">–ö–¢–û –¢–ê–ú –ü–ò–°–ê–õ –ï–†–£–ù–î–£ –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–•?</div>
"""

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML –≤ Streamlit
st.markdown(html_code, unsafe_allow_html=True)
st.write("–ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å?")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
user_input = st.text_area("–¢–µ–∫—Å—Ç", "")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
    if user_input.strip() == "":
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        result = predict_toxicity(user_input)
        st.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**")